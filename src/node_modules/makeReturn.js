const bel = require("bel")
const moreInfo = require('moreInfo')
const csjs = require('csjs-inject')
const colors = require('theme')
const decodeReturnData = require('decodeReturnData')

module.exports = makeReturn

async function makeReturn (opts) {
//async function makeReturn (contract, solcMetadata, provider, tx, fnName) {
  var el = bel`<div class=${css.txReturnItem}></div>`
  const data = getReturnData(opts)
  el.appendChild(makeTxReturn(css, data))
  return el
}

function getReturnData (opts) {
  var iface = new ethers.utils.Interface(opts.solcMetadata.output.abi)
  var fun = opts.contract.interface.functions[opts.fnName]
  return decodeReturnData(opts.tx, fun.outputs)
}

function makeTxReturn (css, data) {
  return bel`
    <div class=${css.txReceipt}>
        <div class=${css.txReturnField}>
          <div class=${css.txReturnValue}>${JSON.stringify(data, null, 2)}</div>
        </div>
    </div>`
}

var css = csjs`
.txReturnItem {
  position: relative;
  font-size: 0.7rem;
  display: flex;
  color: ${colors.whiteSmoke};
  border: 1px solid ${colors.darkSmoke};
  width: 87%;
  margin: 3%;
  padding: 3%;
  justify-content: space-between;
  flex-direction: column;
}
.txReceipt {
  display:flex;
  justify-content: flex-start;
  flex-direction: column;
}
.txReturnField {
  display:flex;
  justify-content: flex-start;
  flex-direction: column;
  margin-bottom: 1%;
}
.txReturnValue {
  color: ${colors.slateGrey};
  cursor: pointer;
  word-break: break-all;
}
.txReturnValue:hover {
  cursor: pointer;
  opacity: 0.6;
}`
